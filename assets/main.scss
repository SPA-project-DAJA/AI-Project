@import "https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css";
// Dodatkowe style dla strony

// Styl dla wyszukiwarki
.input-container {
  margin-bottom: 20px;
}

// Styl dla przycisku wyszukiwania
.search-button {
  margin-left: 10px;
}

// Styl dla ładowania danych
.loader {
  margin-top: 20px;
}

// Styl dla wyników
.result {
  display: flex;
  flex-wrap: wrap;
}

.result-item {
  margin-right: 10px;
  margin-bottom: 10px;
}

.thumbnail img {
  width: 200px;
  height: auto;
  cursor: pointer;
}

// Styl dla modala
.modal {
  display: block;
  position: fixed;
  z-index: 1;
  padding-top: 100px;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
}

.modal img {
  margin: auto;
  display: block;
  max-width: 90%;
  max-height: 90%;
}

.close {
  position: absolute;
  top: 15px;
  right: 35px;
  font-size: 40px;
  font-weight: bold;
  transition: 0.3s;
}

.close:hover,
.close:focus {
  color: #bbb;
  text-decoration: none;
  cursor: pointer;
}

//defining scss variable
//light theme
$colors: (
  base: #ffffff,
  text: #000000,
  base2: #eeeeee,
  text2: #111111,
);
//dark theme
$colors-dark: (
  base: #000000,
  text: #ffffff,
  base2: #111111,
  text2: #eeeeee,
);
//converting scss variable into css variable
:root {
  @each $name, $color in $colors {
    --color-#{$name}: #{$color};
  }
  --theme: "light";
}

@media (prefers-color-scheme: dark) {
  :root {
    @each $name, $color in $colors-dark {
      --color-#{$name}: #{$color};
    }
    --theme: "dark";
  }
}
//creating a function to get color instead of using css varible
@function getColor($color-name) {
  @return var(--color-#{$color-name});
}

body {
  background: getColor(base);
  margin: 0;
  padding: 0;
}
.container {
  background: getColor(base);
  color: getColor(text);
  margin-top: 50px;
  .card {
    height: auto;
    width: 300px;
    margin: 0 auto;
    border-radius: 20px;
    background: getColor(base2);
    padding: 20px;
    h1 {
      &:after {
        content: var(--theme);
      }
    }
    p {
      color: getColor(text2);
    }
  }
}
